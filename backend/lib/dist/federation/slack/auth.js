"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchToken = exports.deleteInstallation = exports.fetchInstallation = exports.addTeamInformation = void 0;
const aws_sdk_1 = require("aws-sdk");
const encrypter_1 = require("./encrypter");
const authEncrypter = new encrypter_1.Encrypter({
    password: process.env.APP_DB_PASSWORD || "pass",
    salt: process.env.APP_DB_SALT || "salt",
    secret: process.env.APP_DB_SECRET || "secret",
});
const database = {
    cache: {},
};
const ddb = new aws_sdk_1.DynamoDB();
const slackFederationAuthsTableName = process.env.SLACK_FEDERATION_AUTHS_TABLE_NAME || "";
const addInstllationToDB = async (installation) => {
    const info = JSON.stringify(installation);
    const teamId = installation.team.id;
    const encInfo = authEncrypter.encodeInformation(info);
    const item = {
        TeamId: { S: teamId },
        Data: { S: encInfo },
    };
    await ddb
        .putItem({
        TableName: slackFederationAuthsTableName,
        Item: item,
    })
        .promise();
};
const queryInstallationFromDB = async (teamId) => {
    try {
        console.log(`Query Installation1: ${teamId}`);
        const result = await ddb.getItem({ TableName: slackFederationAuthsTableName, Key: { TeamId: { S: teamId } } }).promise();
        console.log(`Query Installation2: ${JSON.stringify(result)}`);
        if (!result.Item) {
            console.log(`Query Installation: No record for ${teamId}`);
            return null;
        }
        const encInfo = result.Item.Data.S;
        console.log(`Query Installation: encInfo ${encInfo}`);
        const infoJson = authEncrypter.decodeInformation(encInfo);
        console.log(`Query Installation: info ${infoJson}`);
        const info = JSON.parse(infoJson || "{}");
        console.log(`Query Installation: info ${info}`);
        return info;
    }
    catch (exception) {
        console.log(`Query Installation Exception!: ${exception}`);
        return null;
    }
};
const deleteInstallationFromDB = async (teamId) => {
    await ddb
        .deleteItem({
        TableName: slackFederationAuthsTableName,
        Key: {
            TeamId: { S: teamId },
        },
    })
        .promise();
};
const addTeamInformation = async (installation) => {
    console.log("STORE INSTALATTION!!!!!!!!!!!");
    console.dir(database, { depth: 5 });
    const teamId = installation.team.id;
    const existInformation = await queryInstallationFromDB(teamId);
    if (existInformation) {
        await deleteInstallationFromDB(teamId);
    }
    await addInstllationToDB(installation);
    database.cache[teamId] = installation;
};
exports.addTeamInformation = addTeamInformation;
const fetchInstallation = async (installQuery) => {
    console.log("FETCH INSTALATTION!!!!!!!!!!!");
    const teamId = installQuery.teamId;
    if (!database.cache[teamId]) {
        database.cache[teamId] = await queryInstallationFromDB(teamId);
    }
    return database.cache[installQuery.teamId];
};
exports.fetchInstallation = fetchInstallation;
const deleteInstallation = async (installQuery) => {
    console.log("DELETE INSTALATTION!!!!!!!!!!!");
    delete database.cache[installQuery.teamId];
    return;
};
exports.deleteInstallation = deleteInstallation;
const fetchToken = async (teamId) => {
    console.log("FETCH TOKEN!!!!!!!!!!!");
    if (!database.cache[teamId]) {
        database.cache[teamId] = await queryInstallationFromDB(teamId);
    }
    if (database.cache[teamId]) {
        return database.cache[teamId].bot.token;
    }
    else {
        return null;
    }
};
exports.fetchToken = fetchToken;
//# sourceMappingURL=data:application/json;base64,