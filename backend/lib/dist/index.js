"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const backend_request_1 = require("./backend_request");
const meeting_1 = require("./meeting");
const util_1 = require("./util");
var meetingTableName = process.env.MEETING_TABLE_NAME;
var attendeesTableName = process.env.ATTENDEE_TABLE_NAME;
var ddb = new aws_sdk_1.DynamoDB();
const Methods = {
    GET: "GET",
    POST: "POST",
    DELETE: "DELETE",
};
const Resources = {
    Root: "/",
    Meetings: "/meetings",
    Meeting: "/meetings/{meetingName}",
    Attendees: "/meetings/{meetingName}/attendees",
    Attendee: "/meetings/{meetingName}/attendees/{attendeeId}",
    Operation: "/meetings/{meetingName}/attendees/{attendeeId}/operations/{operation}",
};
const Operations = {
    StartTranscribe: "start-transcribe",
    StopTranscribe: "stop-transcribe",
};
const Codes = {
    SUCCESS: "SUCCESS",
    UNKNOWN_RESOURCE: "UNKNOWN_RESOURCE",
    UNKNOWN_METHOD: "UNKNOWN_METHOD",
    TOKEN_ERROR: "TOKEN_ERROR",
    PARAMETER_ERROR: "PARAMETER_ERROR",
    NO_SUCH_A_MEETING_ROOM: "NO_SUCH_A_MEETING_ROOM",
    NO_SUCH_AN_ATTENDEE: "NO_SUCH_AN_ATTENDEE",
};
const handler = (event, context, callback) => {
    console.log(event);
    console.log("resource:", event.resource);
    console.log("pathPArameters:", event.pathParameters);
    console.log("method", event.httpMethod);
    console.log("body", event.body);
    const resource = event.resource;
    const pathParams = event.pathParameters;
    const method = event.httpMethod;
    const body = event.body;
    const accessToken = event.headers["x-flect-access-token"];
    console.log("pathParams", pathParams);
    switch (resource) {
        case Resources.Root:
            handleRoot(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Meetings:
            handleMeetings(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Meeting:
            handleMeeting(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Attendees:
            handleAttendees(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Attendee:
            handleAttendee(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Operation:
            handleOperation(accessToken, method, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon resource name: ${resource}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_RESOURCE });
            callback(null, response);
    }
};
exports.handler = handler;
// (0) Root
const handleRoot = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE ROOT: ${method} ${body}`);
    const response = (0, util_1.generateResponse)({ success: true, code: Codes.SUCCESS });
    callback(null, response);
};
// (1) meetings
const handleMeetings = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE Meetings: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetMeetings(accessToken, pathParams, body, callback);
            break;
        case Methods.POST:
            handlePostMeetings(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (1-1) get meetings
const handleGetMeetings = (accessToken, pathParams, body, callback) => {
    ////// Not implemented
    const response = (0, util_1.generateResponse)({ success: true, code: Codes.SUCCESS });
    callback(null, response);
};
//// (1-2) post meetings
const handlePostMeetings = async (accessToken, pathParams, body, callback) => {
    const params = JSON.parse(body);
    let email;
    try {
        email = await (0, util_1.getEmailFromAccessToken)(accessToken);
    }
    catch (e) {
        console.log(e);
    }
    let res;
    if (email) {
        const result = await (0, meeting_1.createMeeting)({
            email,
            meetingName: params.meetingName,
            region: params.region,
        });
        const httpRes = {
            created: result.created,
            meetingId: result.meetingId,
            meetingName: result.meetingName,
            ownerId: result.ownerId,
        };
        res = {
            success: true,
            code: Codes.SUCCESS,
            data: httpRes,
        };
    }
    else {
        res = {
            success: false,
            code: Codes.TOKEN_ERROR,
        };
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (2) meetings
const handleMeeting = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE Meeting: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetMeeting(accessToken, pathParams, body, callback);
            break;
        case Methods.DELETE:
            handleDeleteMeeting(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (2-1) Get Meeting
const handleGetMeeting = async (accessToken, pathParams, body, callback) => {
    let res;
    const meetingName = pathParams["meetingName"];
    let email = "";
    try {
        email = (await (0, util_1.getEmailFromAccessToken)(accessToken)) || "";
    }
    catch (e) {
        res = {
            success: false,
            code: Codes.NO_SUCH_AN_ATTENDEE,
        };
        const response = (0, util_1.generateResponse)(res);
        callback(null, response);
    }
    if (!meetingName) {
        console.log(`parameter error: ${meetingName}`);
        res = {
            success: false,
            code: Codes.PARAMETER_ERROR,
        };
    }
    else {
        const result = await (0, meeting_1.getMeetingInfo)({ email, meetingName });
        if (!result) {
            res = {
                success: false,
                code: Codes.NO_SUCH_A_MEETING_ROOM,
            };
        }
        else {
            const httpRes = {
                meetingName: result.meetingName,
                meetingId: result.meetingId,
                meeting: result.meeting,
                metadata: result.metadata,
                hmmTaskArn: result.hmmTaskArn,
            };
            res = {
                success: true,
                code: Codes.SUCCESS,
                data: httpRes,
            };
        }
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
//// (2-2) Delete Meeting
const handleDeleteMeeting = async (accessToken, pathParams, body, callback) => {
    let res;
    const meetingName = pathParams["meetingName"];
    if (!meetingName) {
        console.log(`parameter error: ${meetingName}`);
        res = {
            success: false,
            code: Codes.PARAMETER_ERROR,
        };
    }
    else {
        await (0, meeting_1.deleteMeeting)({ meetingName });
        res = {
            success: true,
            code: Codes.SUCCESS,
        };
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (3) attendees
const handleAttendees = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE attendees: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetAttendees(accessToken, pathParams, body, callback);
            break;
        case Methods.POST:
            handlePostAttendees(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (3-1) Get Attendees
const handleGetAttendees = async (accessToken, pathParams, body, callback) => {
    // let res: ResponseBody;
    // const response = generateResponse(res);
    // callback(null, response);
};
//// (3-2) Post Attendees
const handlePostAttendees = async (accessToken, pathParams, body, callback) => {
    let res;
    const params = JSON.parse(body);
    const joinInfo = await (0, meeting_1.joinMeeting)({
        meetingName: params.meetingName,
        attendeeName: params.attendeeName,
    });
    if ("exception" in joinInfo) {
        const exception = joinInfo;
        if (exception.code === backend_request_1.BackendJoinMeetingExceptionType.NO_MEETING_FOUND) {
            res = {
                success: false,
                code: Codes.NO_SUCH_A_MEETING_ROOM,
            };
        }
        else {
            res = {
                success: false,
                code: Codes.PARAMETER_ERROR,
            };
        }
    }
    else {
        const httpRes = {
            meetingName: joinInfo.meetingName,
            meeting: joinInfo.meeting,
            attendee: joinInfo.attendee,
        };
        res = {
            success: true,
            code: Codes.SUCCESS,
            data: httpRes,
        };
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (4) attendees
const handleAttendee = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE attendee: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetAttendee(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (4-1) Get Attendee
const handleGetAttendee = async (accessToken, pathParams, body, callback) => {
    let res;
    const meetingName = pathParams["meetingName"];
    const attendeeId = pathParams["attendeeId"];
    if (!meetingName || !attendeeId) {
        console.log(`parameter error: ${meetingName}, ${attendeeId}`);
        res = {
            success: false,
            code: Codes.PARAMETER_ERROR,
        };
    }
    else {
        const attendeeInfo = await (0, meeting_1.getAttendeeInfo)({ meetingName, attendeeId });
        if ("exception" in attendeeInfo) {
            const exception = attendeeInfo;
            if (exception.code === backend_request_1.BackendGetAttendeeInfoExceptionType.NO_ATTENDEE_FOUND) {
                res = {
                    success: false,
                    code: Codes.NO_SUCH_AN_ATTENDEE,
                };
            }
            else {
                res = {
                    success: false,
                    code: Codes.PARAMETER_ERROR,
                };
            }
        }
        else {
            const httpRes = {
                attendeeId: attendeeInfo.attendeeId,
                attendeeName: attendeeInfo.attendeeName,
            };
            res = {
                success: true,
                code: Codes.SUCCESS,
                data: httpRes,
            };
        }
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (5) Operation
const handleOperation = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE operation: ${method} ${body}`);
    const meetingName = pathParams["meetingName"];
    const attendeeId = pathParams["attendeeId"];
    const operation = pathParams["operation"];
    switch (method) {
        case Methods.POST:
            if (operation === Operations.StartTranscribe) {
                handlePostStartTranscribe(accessToken, pathParams, body, callback);
            }
            else if (operation === Operations.StopTranscribe) {
                handlePostStopTranscribe(accessToken, pathParams, body, callback);
            }
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (5-1) start transcribe
const handlePostStartTranscribe = async (accessToken, pathParams, body, callback) => {
    let res;
    const params = JSON.parse(body);
    const meetingName = pathParams["meetingName"];
    const attendeeId = pathParams["attendeeId"];
    //// (1) If there is no meeting, return fai
    let email = "";
    try {
        email = (await (0, util_1.getEmailFromAccessToken)(accessToken)) || "";
    }
    catch (e) {
        res = {
            success: false,
            code: Codes.NO_SUCH_AN_ATTENDEE,
        };
        const response = (0, util_1.generateResponse)(res);
        callback(null, response);
    }
    /// (2)
    (0, meeting_1.startTranscribe)({
        email,
        meetingName,
        lang: params.lang,
    });
    res = {
        success: true,
        code: Codes.SUCCESS,
    };
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
//// (5-2) stop transcribe
const handlePostStopTranscribe = async (accessToken, pathParams, body, callback) => {
    let res;
    const params = JSON.parse(body);
    const meetingName = pathParams["meetingName"];
    const attendeeId = pathParams["attendeeId"];
    //// (1) If there is no meeting, return fai
    let email = "";
    try {
        email = (await (0, util_1.getEmailFromAccessToken)(accessToken)) || "";
    }
    catch (e) {
        res = {
            success: false,
            code: Codes.NO_SUCH_AN_ATTENDEE,
        };
        const response = (0, util_1.generateResponse)(res);
        callback(null, response);
    }
    /// (2)
    (0, meeting_1.stopTranscribe)({
        email,
        meetingName,
    });
    res = {
        success: true,
        code: Codes.SUCCESS,
    };
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
//# sourceMappingURL=data:application/json;base64,