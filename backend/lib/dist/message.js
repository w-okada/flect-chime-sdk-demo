"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorize = void 0;
const aws_sdk_1 = require("aws-sdk");
const chime = new aws_sdk_1.Chime({ region: "us-east-1" });
const ddb = new aws_sdk_1.DynamoDB();
/**
 * generate policy. subfunction of authorizer.
 * @param {*} principalId
 * @param {*} effect
 * @param {*} resource
 * @param {*} context
 */
const generatePolicy = (principalId, effect, resource, context) => {
    if (effect && resource) {
        const policyDocument = {
            Version: "2012-10-17",
            Statement: [
                {
                    Action: "execute-api:Invoke",
                    Effect: effect,
                    Resource: resource,
                },
            ],
        };
        const authResponse = {
            principalId: principalId,
            policyDocument: policyDocument,
            context: context,
        };
        return authResponse;
    }
    return {};
};
/**
 * Authorizer
 * (1) check query parameter. meetingId, attendeeId, joinToken
 * (2) check attendee in the meeting
 * (3) check joinToken
 * (4) return policy
 * @param {*} event
 * @param {*} context
 * @param {*} callback
 */
const authorize = async (event, context, callback) => {
    console.log("authorize event:", JSON.stringify(event, null, 2));
    console.log("authorize event:", JSON.stringify(context, null, 2));
    let passedAuthCheck = false;
    //// (1) check query parameter. meetingId, attendeeId, joinToken
    if (!event.queryStringParameters.meetingId || !event.queryStringParameters.attendeeId || !event.queryStringParameters.joinToken) {
        console.error("missing MeetingId, AttendeeId, JoinToken parameters", event.queryStringParameters);
        return generatePolicy("me", "Deny", event.methodArn, {});
    }
    console.log("meetingId:", event.queryStringParameters.meetingId);
    console.log("attendeeId:", event.queryStringParameters.attendeeId);
    console.log("joinToken:", event.queryStringParameters.joinToken);
    //// (2) check attendee in the meeting
    let attendeeInfo;
    try {
        console.log("auth attendeeId1: ", event.queryStringParameters.attendeeId);
        const attendeeId = event.queryStringParameters.attendeeId.split("_")[0]; //// for extension, (currently no meeting)
        console.log("auth attendeeId2: ", attendeeId);
        attendeeInfo = await chime
            .getAttendee({
            MeetingId: event.queryStringParameters.meetingId,
            AttendeeId: attendeeId,
        })
            .promise();
    }
    catch (e) {
        console.error(`failed to authenticate with join token: ${e}`);
        return generatePolicy("me", "Deny", event.methodArn, {});
    }
    //// (3) check joinToken
    if (attendeeInfo.Attendee.JoinToken !== event.queryStringParameters.joinToken) {
        console.error(`failed to authenticate with join token ${attendeeInfo.Attendee.JoinToken} - ${event.queryStringParameters.joinToken}`);
        return generatePolicy("me", "Deny", event.methodArn, {});
    }
    //// (4) return policy
    return generatePolicy("me", "Allow", event.methodArn, {
        meetingId: event.queryStringParameters.meetingId,
        attendeeId: event.queryStringParameters.attendeeId,
    });
};
exports.authorize = authorize;
/**
 * register connection. The connectionId is generatedBy API GW automatically?
 * (1) register connection info to DB
 * @param {*} event
 * @param {*} context
 * @param {*} callback
 */
exports.connect = async (event, context, callback) => {
    console.log(event);
    console.log(context);
    console.log(callback);
    //// (1) register connection info to DB
    const oneDayFromNow = Math.floor(Date.now() / 1000) + 60 * 60 * 24;
    try {
        const meetingId = event.queryStringParameters.meetingId;
        const attendeeId = event.queryStringParameters.attendeeId;
        console.log("meetingId:", meetingId);
        console.log("attendeeId", attendeeId);
        const res = await ddb
            .putItem({
            TableName: process.env.CONNECTION_TABLE_NAME,
            Item: {
                MeetingId: { S: meetingId },
                AttendeeId: { S: attendeeId },
                ConnectionId: { S: event.requestContext.connectionId },
                TTL: { N: `${oneDayFromNow}` },
            },
        })
            .promise();
        console.log("update res", res);
    }
    catch (e) {
        console.error(`error connecting: ${e}`);
        return {
            statusCode: 500,
            body: `Failed to connect: ${JSON.stringify(e)}`,
        };
    }
    return { statusCode: 200, body: "Connected." };
};
/**
 * disconnect.
 * (1) remove connection from DB
 * @param {*} event
 * @param {*} context
 * @param {*} callback
 */
exports.disconnect = async (event, context, callback) => {
    console.log(event);
    console.log(context);
    console.log(callback);
    try {
        const meetingId = event.requestContext.authorizer.meetingId;
        const attendeeId = event.requestContext.authorizer.attendeeId;
        console.log(meetingId, attendeeId);
        //// (1) remove connection from DB
        await ddb
            .deleteItem({
            TableName: process.env.CONNECTION_TABLE_NAME,
            Key: {
                MeetingId: { S: meetingId },
                AttendeeId: { S: attendeeId },
            },
        })
            .promise();
    }
    catch (err) {
        console.error(`error : ${err}`);
        return {
            statusCode: 500,
            body: `Failed to disconnect: ${JSON.stringify(err)}`,
        };
    }
    return { statusCode: 200, body: "Disconnected." };
};
/**
 * message
 * (1) Gather the information of attendees in the same meeting
 * (2) get endpoint of API GW
 * (3) decide the destination
 * (4) send message
 * @param {*} event
 * @param {*} context
 * @param {*} callback
 */
exports.message = async (event, context, callback) => {
    console.log(event);
    console.log(context);
    console.log(callback);
    console.log("sendmessage event:", JSON.stringify(event, null, 2));
    console.log("meetingId", event.requestContext.authorizer.meetingId);
    //// (1) Gather the information of attendees in the same meeting
    let attendees;
    try {
        attendees = await ddb
            .query({
            ExpressionAttributeValues: {
                ":meetingId": { S: event.requestContext.authorizer.meetingId },
            },
            KeyConditionExpression: "MeetingId = :meetingId",
            ProjectionExpression: "ConnectionId, AttendeeId",
            TableName: process.env.CONNECTION_TABLE_NAME,
        })
            .promise();
    }
    catch (e) {
        console.log("Query error:", e);
        return { statusCode: 500, body: JSON.stringify(e) };
    }
    //// (2) get endpoint of API GW
    const apigwManagementApi = new aws_sdk_1.ApiGatewayManagementApi({
        apiVersion: "2018-11-29",
        endpoint: `${event.requestContext.domainName}/${event.requestContext.stage}`,
    });
    //// (3) decide the destination
    console.log("DATA:", event.body);
    console.log("Attendee!!!:", attendees);
    const body = JSON.parse(event.body);
    const targetId = body.targetId;
    const privateMessage = body.private;
    console.log("targetId:", targetId);
    console.log("private:", privateMessage);
    /// (4) send message
    const postCalls = attendees.Items.map(async (connection) => {
        const connectionId = connection.ConnectionId.S;
        const attendeeId = connection.AttendeeId.S;
        if (privateMessage !== true || attendeeId === targetId) {
            try {
                const res = await apigwManagementApi
                    .postToConnection({
                    ConnectionId: connectionId,
                    Data: JSON.stringify(body),
                })
                    .promise();
                console.log("done sending!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1", res);
                console.log("done sending!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!2", connectionId);
                console.log("done sending!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!3", JSON.stringify(body));
            }
            catch (e) {
                console.error(`error posting to connection ${connectionId}: ${JSON.stringify(e)}`);
            }
        }
    });
    try {
        const res = await Promise.all(postCalls);
        console.log("RESPONSE!", res);
    }
    catch (e) {
        console.error(`failed to post: ${JSON.stringify(e)}`);
        return { statusCode: 500, body: JSON.stringify(e) };
    }
    body.done = true;
    // body.content.fileParts = "" // reduce trafic
    return { statusCode: 200, body: JSON.stringify(body) };
};
//# sourceMappingURL=data:application/json;base64,