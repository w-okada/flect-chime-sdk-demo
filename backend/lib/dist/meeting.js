"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopTranscribe = exports.startTranscribe = exports.getAttendeeInfo = exports.joinMeeting = exports.createMeeting = exports.deleteMeeting = exports.getMeetingInfo = void 0;
const aws_sdk_1 = require("aws-sdk");
const uuid_1 = require("uuid");
const backend_request_1 = require("./backend_request");
const util_1 = require("./util");
var meetingTableName = process.env.MEETING_TABLE_NAME;
var attendeesTableName = process.env.ATTENDEE_TABLE_NAME;
var ddb = new aws_sdk_1.DynamoDB();
const chime = new aws_sdk_1.Chime({ region: "us-east-1" });
chime.endpoint = new aws_sdk_1.Endpoint("https://service.chime.aws.amazon.com/console");
/**
 * get meeting info
 * (1) retrieve meeting info from DB
 * (2) If there is no meeting in DB, return null
 * (3) If there is no meeting in Amazon Chime, delete from DB and return null.
 * @param {*} meetingName
 */
const getMeetingInfo = async (req) => {
    //// (1) retrieve info
    console.log("dynamo1", req.meetingName);
    const result = await ddb.getItem({ TableName: meetingTableName, Key: { MeetingName: { S: req.meetingName } } }).promise();
    console.log("dynamo2", result);
    //// (2) If no meeting in DB, return null
    if (!result.Item) {
        return null;
    }
    //// (3) If no meeting in Chime, delete meeting from DB and return null
    const meetingInfo = result.Item;
    console.log("READ PROPR1");
    const meetingData = JSON.parse(meetingInfo.Meeting.S);
    console.log("READ PROPR2");
    try {
        // Check Exist?
        const mid = await chime.getMeeting({ MeetingId: meetingData.MeetingId }).promise();
        console.log("chime meeting info:", mid);
    }
    catch (err) {
        console.log("chime meeting exception:", err);
        await (0, exports.deleteMeeting)({ meetingName: req.meetingName });
        return null;
    }
    console.log("READ PROPR3");
    //// (4) return meeting info
    return {
        meetingName: meetingInfo.MeetingName.S,
        meetingId: meetingInfo.MeetingId.S,
        meeting: JSON.parse(meetingInfo.Meeting.S),
        metadata: JSON.parse(meetingInfo.Metadata.S),
        hmmTaskArn: meetingInfo.HmmTaskArn ? meetingInfo.HmmTaskArn.S : "-",
        isOwner: req.email === JSON.parse(meetingInfo.Metadata.S).OwnerId,
    };
};
exports.getMeetingInfo = getMeetingInfo;
/**
 * Delete meeting from DB
 * @param {*} meetingName
 */
const deleteMeeting = async (req) => {
    await ddb
        .deleteItem({
        TableName: meetingTableName,
        Key: {
            MeetingName: { S: req.meetingName },
        },
    })
        .promise();
};
exports.deleteMeeting = deleteMeeting;
const createMeeting = async (req) => {
    //// (1) check meeting name exist
    const meetingInfo = await (0, exports.getMeetingInfo)({ meetingName: req.meetingName });
    if (meetingInfo !== null) {
        return {
            created: false,
            meetingId: meetingInfo.meetingId,
            meetingName: meetingInfo.meetingName,
            ownerId: meetingInfo.metadata.OwnerId,
        };
    }
    //// (2) create meeting in Amazon Chime
    const request = {
        ClientRequestToken: (0, uuid_1.v4)(),
        MediaRegion: req.region,
    };
    const newMeetingInfo = await chime.createMeeting(request).promise();
    //// (3) register meeting info in DB
    const date = new Date();
    const now = date.getTime();
    const metadata = {
        OwnerId: req.email,
        Region: req.region,
        StartTime: now,
    };
    const item = {
        MeetingName: { S: req.meetingName },
        MeetingId: { S: newMeetingInfo.Meeting.MeetingId },
        Meeting: { S: JSON.stringify(newMeetingInfo.Meeting) },
        Metadata: { S: JSON.stringify(metadata) },
        TTL: {
            N: "" + (0, util_1.getExpireDate)(),
        },
    };
    await ddb
        .putItem({
        TableName: meetingTableName,
        Item: item,
    })
        .promise();
    return {
        created: true,
        meetingId: newMeetingInfo.Meeting.MeetingId,
        meetingName: req.meetingName,
        ownerId: req.email,
    };
};
exports.createMeeting = createMeeting;
const joinMeeting = async (req) => {
    //// (1) check meeting exists
    let meetingInfo = await (0, exports.getMeetingInfo)({ meetingName: req.meetingName });
    if (meetingInfo === null) {
        return {
            code: backend_request_1.BackendJoinMeetingExceptionType.NO_MEETING_FOUND,
            exception: true,
        };
    }
    //// (2) check attendeeName
    if (req.attendeeName === "") {
        return {
            code: backend_request_1.BackendJoinMeetingExceptionType.PARAMETER_ERROR,
            exception: true,
        };
    }
    //// (3) create attendee in Amazon Chime
    console.info("Adding new attendee");
    const attendeeInfo = await chime
        .createAttendee({
        MeetingId: meetingInfo.meetingId,
        ExternalUserId: (0, uuid_1.v4)(),
    })
        .promise();
    //// (4) register attendee in DB
    await ddb
        .putItem({
        TableName: attendeesTableName,
        Item: {
            AttendeeId: {
                S: `${req.meetingName}/${attendeeInfo.Attendee.AttendeeId}`,
            },
            AttendeeName: { S: req.attendeeName },
            TTL: {
                N: "" + (0, util_1.getExpireDate)(),
            },
        },
    })
        .promise();
    console.log("MEETING_INFO", meetingInfo);
    return {
        meetingName: meetingInfo.meetingName,
        meeting: meetingInfo.meeting,
        attendee: attendeeInfo.Attendee,
    };
};
exports.joinMeeting = joinMeeting;
const getAttendeeInfo = async (req) => {
    //// (1) retrieve attendee info from DB. key is concatinate of meetingName(encoded) and attendeeId
    const result = await ddb
        .getItem({
        TableName: attendeesTableName,
        Key: {
            AttendeeId: {
                S: `${req.meetingName}/${req.attendeeId}`,
            },
        },
    })
        .promise();
    //// (2) If there is no attendee in the meeting, return fail
    if (!result.Item) {
        return {
            code: backend_request_1.BackendGetAttendeeInfoExceptionType.NO_ATTENDEE_FOUND,
            exception: true,
        };
    }
    console.log(result);
    //// (3) return attendee info.
    return {
        attendeeId: result.Item.AttendeeId.S,
        attendeeName: result.Item.AttendeeName.S,
    };
};
exports.getAttendeeInfo = getAttendeeInfo;
const startTranscribe = async (req) => {
    //// (1) check meeting exists
    let meetingInfo = await (0, exports.getMeetingInfo)({ meetingName: req.meetingName });
    if (meetingInfo === null) {
        return {
            code: backend_request_1.BackendStartTranscribeExceptionType.NO_MEETING_FOUND,
            exception: true,
        };
    }
    //// (2) check if owner calls or not.
    var meetingMetadata = meetingInfo.metadata;
    var ownerId = meetingMetadata["OwnerId"];
    console.log("OWNERID", ownerId, "email", req.email);
    if (ownerId != req.email) {
        return {
            code: backend_request_1.BackendStartTranscribeExceptionType.NOT_OWNER,
            exception: true,
        };
    }
    //// (3) start transcribe
    console.log(`Langage code :${req.lang}`);
    const res = await chime
        .startMeetingTranscription({
        MeetingId: meetingInfo.meetingId,
        TranscriptionConfiguration: {
            EngineTranscribeSettings: {
                LanguageCode: req.lang,
                //VocabularyFilterMethod?: TranscribeVocabularyFilterMethod;
                //VocabularyFilterName?: String;
                //VocabularyName?: String;
                //Region?: TranscribeRegion;
            },
        },
    })
        .promise();
    return {};
};
exports.startTranscribe = startTranscribe;
/***
 * stop Transcribe.
 *
 */
const stopTranscribe = async (req) => {
    console.log("stopTranscribe");
    //// (1) If there is no meeting, return fail
    let meetingInfo = await (0, exports.getMeetingInfo)({ meetingName: req.meetingName });
    if (meetingInfo === null) {
        return {
            code: backend_request_1.BackendStopTranscribeExceptionType.NO_MEETING_FOUND,
            exception: true,
        };
    }
    //// (2) check if owner calls or not.
    var meetingMetadata = meetingInfo.metadata;
    var ownerId = meetingMetadata["OwnerId"];
    console.log("OWNERID", ownerId, "email", req.email);
    if (ownerId != req.email) {
        return {
            code: backend_request_1.BackendStopTranscribeExceptionType.NOT_OWNER,
            exception: true,
        };
    }
    //// (3) stop transcribe
    const res = await chime
        .stopMeetingTranscription({
        MeetingId: meetingInfo.meetingId,
    })
        .promise();
    console.log("stop transcribe result", res);
    return {};
};
exports.stopTranscribe = stopTranscribe;
//# sourceMappingURL=data:application/json;base64,