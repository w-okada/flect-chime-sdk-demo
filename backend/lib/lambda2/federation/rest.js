"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserInformation = void 0;
const exception_1 = require("../exception");
const node_fetch_1 = require("node-fetch");
// export const createMeeting = async (context: SlackRestApiContext): Promise<Result<SlackGetUserInformationResponse, Error>> => {
const getUserInformation = async (context) => {
    const url = `${context.restApiBaseURL}api/decodeInformation`;
    const httpRequest = {
        token: `${context.token}`,
    };
    const requestBody = JSON.stringify(httpRequest);
    const res = await (0, node_fetch_1.default)(url, {
        method: "POST",
        body: requestBody,
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
        },
    });
    const response = (await res.json());
    if (response.success) {
        const httpResponse = response.data;
        const returnValue = { ...httpResponse };
        return new exception_1.Success(returnValue);
    }
    else {
        return new exception_1.Failure(new Error("slack federation failed..."));
    }
};
exports.getUserInformation = getUserInformation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQXdEO0FBQ3hELDJDQUErQjtBQXlCL0Isa0lBQWtJO0FBQzNILE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxFQUFFLE9BQTRCLEVBQTJELEVBQUU7SUFDOUgsTUFBTSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsY0FBYyx1QkFBdUIsQ0FBQztJQUM3RCxNQUFNLFdBQVcsR0FBRztRQUNoQixLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFO0tBQzVCLENBQUM7SUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxvQkFBSyxFQUFDLEdBQUcsRUFBRTtRQUN6QixNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUksRUFBRSxXQUFXO1FBQ2pCLE9BQU8sRUFBRTtZQUNMLE1BQU0sRUFBRSxrQkFBa0I7WUFDMUIsY0FBYyxFQUFFLGtCQUFrQjtTQUNyQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQXFCLENBQUM7SUFDeEQsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ2xCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUEyQyxDQUFDO1FBQzFFLE1BQU0sV0FBVyxHQUFvQyxFQUFFLEdBQUcsWUFBWSxFQUFFLENBQUM7UUFDekUsT0FBTyxJQUFJLG1CQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkM7U0FBTTtRQUNILE9BQU8sSUFBSSxtQkFBTyxDQUFDLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQztLQUMvRDtBQUNMLENBQUMsQ0FBQztBQXRCVyxRQUFBLGtCQUFrQixzQkFzQjdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmFpbHVyZSwgUmVzdWx0LCBTdWNjZXNzIH0gZnJvbSBcIi4uL2V4Y2VwdGlvblwiO1xuaW1wb3J0IGZldGNoIGZyb20gXCJub2RlLWZldGNoXCI7XG5pbXBvcnQgeyBIVFRQUmVzcG9uc2VCb2R5LCBTbGFja0hUVFBHZXRVc2VySW5mb3JtYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwX3JlcXVlc3RcIjtcblxuZXhwb3J0IHR5cGUgU2xhY2tSZXN0QXBpQ29udGV4dCA9IHtcbiAgICByZXN0QXBpQmFzZVVSTDogc3RyaW5nO1xuICAgIHRva2VuOiBzdHJpbmc7XG59O1xuXG4vLyBleHBvcnQgdHlwZSBTbGFja0dldFVzZXJJbmZvcm1hdGlvblJlcXVlc3QgPSB7XG4vLyAgICAgZHVtbXk6c3RyaW5nXG4vLyB9O1xuZXhwb3J0IHR5cGUgU2xhY2tHZXRVc2VySW5mb3JtYXRpb25SZXNwb25zZSA9IHtcbiAgICByb29tS2V5OiBzdHJpbmc7XG4gICAgcm9vbU5hbWU6IHN0cmluZztcbiAgICBjaGFubmVsSWQ6IHN0cmluZztcbiAgICBjaGFubmVsTmFtZTogc3RyaW5nO1xuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIHVzZXJOYW1lOiBzdHJpbmc7XG4gICAgaW1hZ2VVcmw6IHN0cmluZztcbiAgICBjaGltZUluZm86IHtcbiAgICAgICAgYXR0ZW5kZWVOYW1lOiBzdHJpbmc7XG4gICAgICAgIHVzZURlZmF1bHQ6IGJvb2xlYW47XG4gICAgfTtcbn07XG5cbi8vIGV4cG9ydCBjb25zdCBjcmVhdGVNZWV0aW5nID0gYXN5bmMgKGNvbnRleHQ6IFNsYWNrUmVzdEFwaUNvbnRleHQpOiBQcm9taXNlPFJlc3VsdDxTbGFja0dldFVzZXJJbmZvcm1hdGlvblJlc3BvbnNlLCBFcnJvcj4+ID0+IHtcbmV4cG9ydCBjb25zdCBnZXRVc2VySW5mb3JtYXRpb24gPSBhc3luYyAoY29udGV4dDogU2xhY2tSZXN0QXBpQ29udGV4dCk6IFByb21pc2U8UmVzdWx0PFNsYWNrR2V0VXNlckluZm9ybWF0aW9uUmVzcG9uc2UsIEVycm9yPj4gPT4ge1xuICAgIGNvbnN0IHVybCA9IGAke2NvbnRleHQucmVzdEFwaUJhc2VVUkx9YXBpL2RlY29kZUluZm9ybWF0aW9uYDtcbiAgICBjb25zdCBodHRwUmVxdWVzdCA9IHtcbiAgICAgICAgdG9rZW46IGAke2NvbnRleHQudG9rZW59YCxcbiAgICB9O1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gSlNPTi5zdHJpbmdpZnkoaHR0cFJlcXVlc3QpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBib2R5OiByZXF1ZXN0Qm9keSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IHJlcy5qc29uKCkpIGFzIEhUVFBSZXNwb25zZUJvZHk7XG4gICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc3QgaHR0cFJlc3BvbnNlID0gcmVzcG9uc2UuZGF0YSBhcyBTbGFja0hUVFBHZXRVc2VySW5mb3JtYXRpb25SZXNwb25zZTtcbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWU6IFNsYWNrR2V0VXNlckluZm9ybWF0aW9uUmVzcG9uc2UgPSB7IC4uLmh0dHBSZXNwb25zZSB9O1xuICAgICAgICByZXR1cm4gbmV3IFN1Y2Nlc3MocmV0dXJuVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRmFpbHVyZShuZXcgRXJyb3IoXCJzbGFjayBmZWRlcmF0aW9uIGZhaWxlZC4uLlwiKSk7XG4gICAgfVxufTtcbiJdfQ==