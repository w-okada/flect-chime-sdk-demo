"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const const_1 = require("./const");
const meeting_1 = require("./meeting");
const util_1 = require("./util");
var meetingTableName = process.env.MEETING_TABLE_NAME;
var attendeesTableName = process.env.ATTENDEE_TABLE_NAME;
var ddb = new aws_sdk_1.DynamoDB();
const Methods = {
    GET: "GET",
    POST: "POST",
    DELETE: "DELETE",
};
const Resources = {
    Root: "/",
    Meetings: "/meetings",
    Meeting: "/meetings/{meetingName}",
    Attendees: "/meetings/{meetingName}/attendees",
    Attendee: "/meetings/{meetingName}/attendees/{attendeeId}",
};
const Codes = {
    SUCCESS: "SUCCESS",
    UNKNOWN_RESOURCE: "UNKNOWN_RESOURCE",
    UNKNOWN_METHOD: "UNKNOWN_METHOD",
    TOKEN_ERROR: "TOKEN_ERROR",
    PARAMETER_ERROR: "PARAMETER_ERROR",
    NO_SUCH_A_MEETING_ROOM: "NO_SUCH_A_MEETING_ROOM",
    NO_SUCH_AN_ATTENDEE: "NO_SUCH_AN_ATTENDEE",
};
const handler = (event, context, callback) => {
    console.log(event);
    console.log("resource:", event.resource);
    console.log("pathPArameters:", event.pathParameters);
    console.log("method", event.httpMethod);
    console.log("body", event.body);
    const resource = event.resource;
    const pathParams = event.pathParameters;
    const method = event.httpMethod;
    const body = event.body;
    const accessToken = event.headers["x-flect-access-token"];
    console.log("pathParams", pathParams);
    switch (resource) {
        case Resources.Root:
            handleRoot(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Meetings:
            handleMeetings(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Meeting:
            handleMeeting(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Attendees:
            handleAttendees(accessToken, method, pathParams, body, callback);
            break;
        case Resources.Attendee:
            handleAttendee(accessToken, method, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon resource name: ${resource}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_RESOURCE });
            callback(null, response);
    }
    // const response = getResponseTemplate();
    // const meetingName = "TEST";
    // const result = await ddb
    //     .getItem({
    //         TableName: meetingTableName,
    //         Key: {
    //             MeetingName: {
    //                 S: meetingName,
    //             },
    //         },
    //     })
    //     .promise();
    // console.log("dynamo", result);
    // //// (2) If no meeting in DB, return null
    // if (!result.Item) {
    //     response.body = JSON.stringify({ x: 5, y: 6 });
    // } else {
    //     const meetingInfo = result.Item;
    //     const meetingData = JSON.parse(meetingInfo.Data.S!);
    //     response.body = JSON.stringify(meetingData);
    // }
};
exports.handler = handler;
// (0) Root
const handleRoot = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE ROOT: ${method} ${body}`);
    const response = (0, util_1.generateResponse)({ success: true, code: Codes.SUCCESS });
    callback(null, response);
};
// (1) meetings
const handleMeetings = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE Meetings: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetMeetings(accessToken, pathParams, body, callback);
            break;
        case Methods.POST:
            handlePostMeetings(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (1-1) get meetings
const handleGetMeetings = (accessToken, pathParams, body, callback) => {
    ////// Not implemented
    const response = (0, util_1.generateResponse)({ success: true, code: Codes.SUCCESS });
    callback(null, response);
};
//// (1-2) post meetings
const handlePostMeetings = async (accessToken, pathParams, body, callback) => {
    const params = JSON.parse(body);
    let email;
    try {
        email = await (0, util_1.getEmailFromAccessToken)(accessToken);
    }
    catch (e) {
        console.log(e);
    }
    let res;
    if (email) {
        const result = await (0, meeting_1.createMeeting)(email, params.meetingName, params.region);
        res = {
            success: true,
            code: Codes.SUCCESS,
            data: result,
        };
    }
    else {
        res = {
            success: false,
            code: Codes.TOKEN_ERROR,
        };
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (2) meetings
const handleMeeting = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE Meeting: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetMeeting(accessToken, pathParams, body, callback);
            break;
        case Methods.DELETE:
            handleDeleteMeeting(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (2-1) Get Meeting
const handleGetMeeting = async (accessToken, pathParams, body, callback) => {
    let res;
    const meetingName = pathParams["meetingName"];
    if (!meetingName) {
        console.log(`parameter error: ${meetingName}`);
        res = {
            success: false,
            code: Codes.PARAMETER_ERROR,
        };
    }
    else {
        const result = await (0, meeting_1.getMeetingInfo)(meetingName);
        if (!result) {
            res = {
                success: false,
                code: Codes.NO_SUCH_A_MEETING_ROOM,
            };
        }
        else {
            res = {
                success: true,
                code: Codes.SUCCESS,
                data: result,
            };
        }
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
//// (2-2) Delete Meeting
const handleDeleteMeeting = async (accessToken, pathParams, body, callback) => {
    let res;
    const meetingName = pathParams["meetingName"];
    if (!meetingName) {
        console.log(`parameter error: ${meetingName}`);
        res = {
            success: false,
            code: Codes.PARAMETER_ERROR,
        };
    }
    else {
        await (0, meeting_1.deleteMeeting)(meetingName);
        res = {
            success: true,
            code: Codes.SUCCESS,
        };
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (3) attendees
const handleAttendees = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE attendees: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetAttendees(accessToken, pathParams, body, callback);
            break;
        case Methods.POST:
            handlePostAttendees(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (3-1) Get Attendees
const handleGetAttendees = async (accessToken, pathParams, body, callback) => {
    // let res: ResponseBody;
    // const response = generateResponse(res);
    // callback(null, response);
};
//// (3-2) Post Attendees
const handlePostAttendees = async (accessToken, pathParams, body, callback) => {
    let res;
    const params = JSON.parse(body);
    const joinInfo = await (0, meeting_1.joinMeeting)(params.meetingName, params.attendeeName);
    if ("exception" in joinInfo) {
        const exception = joinInfo;
        if (exception.code === const_1.JoinMeetingExceptionType.NO_MEETING_FOUND) {
            res = {
                success: false,
                code: Codes.NO_SUCH_A_MEETING_ROOM,
            };
        }
        else {
            res = {
                success: false,
                code: Codes.PARAMETER_ERROR,
            };
        }
    }
    else {
        res = {
            success: true,
            code: Codes.SUCCESS,
            data: joinInfo,
        };
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
// (4) attendees
const handleAttendee = (accessToken, method, pathParams, body, callback) => {
    console.log(`HANDLE attendee: ${method} ${body}`);
    switch (method) {
        case Methods.GET:
            handleGetAttendee(accessToken, pathParams, body, callback);
            break;
        default:
            console.log(`Unknwon method: ${method}`);
            const response = (0, util_1.generateResponse)({ success: false, code: Codes.UNKNOWN_METHOD });
            callback(null, response);
            break;
    }
};
//// (4-1) Get Attendee
const handleGetAttendee = async (accessToken, pathParams, body, callback) => {
    let res;
    const meetingName = pathParams["meetingName"];
    const attendeeId = pathParams["attendeeId"];
    if (!meetingName || !attendeeId) {
        console.log(`parameter error: ${meetingName}, ${attendeeId}`);
        res = {
            success: false,
            code: Codes.PARAMETER_ERROR,
        };
    }
    else {
        const attendeeInfo = await (0, meeting_1.getAttendeeInfo)(meetingName, attendeeId);
        if ("exception" in attendeeInfo) {
            const exception = attendeeInfo;
            if (exception.code === const_1.GetAttendeeInfoExceptionType.NO_ATTENDEE_FOUND) {
                res = {
                    success: false,
                    code: Codes.NO_SUCH_AN_ATTENDEE,
                };
            }
            else {
                res = {
                    success: false,
                    code: Codes.PARAMETER_ERROR,
                };
            }
        }
        else {
            res = {
                success: true,
                code: Codes.SUCCESS,
                data: attendeeInfo,
            };
        }
    }
    const response = (0, util_1.generateResponse)(res);
    callback(null, response);
};
//# sourceMappingURL=data:application/json;base64,