"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopTranscribe = exports.startTranscribe = exports.getAttendeeInfo = exports.joinMeeting = exports.createMeeting = exports.deleteMeeting = exports.getMeetingInfo = void 0;
const aws_sdk_1 = require("aws-sdk");
const uuid_1 = require("uuid");
const const_1 = require("./const");
const util_1 = require("./util");
var meetingTableName = process.env.MEETING_TABLE_NAME;
var attendeesTableName = process.env.ATTENDEE_TABLE_NAME;
var ddb = new aws_sdk_1.DynamoDB();
const chime = new aws_sdk_1.Chime({ region: "us-east-1" });
chime.endpoint = new aws_sdk_1.Endpoint("https://service.chime.aws.amazon.com/console");
/**
 * get meeting info
 * (1) retrieve meeting info from DB
 * (2) If there is no meeting in DB, return null
 * (3) If there is no meeting in Amazon Chime, delete from DB and return null.
 * @param {*} meetingName
 */
const getMeetingInfo = async (meetingName) => {
    //// (1) retrieve info
    console.log("dynamo1", meetingName);
    const result = await ddb.getItem({ TableName: meetingTableName, Key: { MeetingName: { S: meetingName } } }).promise();
    console.log("dynamo2", result);
    //// (2) If no meeting in DB, return null
    if (!result.Item) {
        return null;
    }
    //// (3) If no meeting in Chime, delete meeting from DB and return null
    const meetingInfo = result.Item;
    console.log("READ PROPR1");
    const meetingData = JSON.parse(meetingInfo.Meeting.S);
    console.log("READ PROPR2");
    try {
        // Check Exist?
        const mid = await chime.getMeeting({ MeetingId: meetingData.MeetingId }).promise();
        console.log("chime meeting info:", mid);
    } catch (err) {
        console.log("chime meeting exception:", err);
        await (0, exports.deleteMeeting)(meetingName);
        return null;
    }
    console.log("READ PROPR3");
    //// (4) return meeting info
    return {
        meetingName: meetingInfo.MeetingName.S,
        meetingId: meetingInfo.MeetingId.S,
        meeting: JSON.parse(meetingInfo.Meeting.S),
        metadata: JSON.parse(meetingInfo.Metadata.S),
        hmmTaskArn: meetingInfo.HmmTaskArn ? meetingInfo.HmmTaskArn.S : "-",
    };
};
exports.getMeetingInfo = getMeetingInfo;
/**
 * Delete meeting from DB
 * @param {*} meetingName
 */
const deleteMeeting = async (meetingName) => {
    await ddb
        .deleteItem({
            TableName: meetingTableName,
            Key: {
                MeetingName: { S: meetingName },
            },
        })
        .promise();
};
exports.deleteMeeting = deleteMeeting;
const createMeeting = async (email, meetingName, region) => {
    //// (1) check meeting name exist
    const meetingInfo = await (0, exports.getMeetingInfo)(meetingName);
    if (meetingInfo !== null) {
        return {
            created: false,
            meetingId: meetingInfo.meetingId,
            meetingName: meetingInfo.meetingName,
            ownerId: meetingInfo.metadata.OwnerId,
        };
    }
    //// (2) create meeting in Amazon Chime
    const request = {
        ClientRequestToken: (0, uuid_1.v4)(),
        MediaRegion: region,
    };
    const newMeetingInfo = await chime.createMeeting(request).promise();
    //// (3) register meeting info in DB
    const date = new Date();
    const now = date.getTime();
    const metadata = {
        OwnerId: email,
        Region: region,
        StartTime: now,
    };
    const item = {
        MeetingName: { S: meetingName },
        MeetingId: { S: newMeetingInfo.Meeting.MeetingId },
        Meeting: { S: JSON.stringify(newMeetingInfo.Meeting) },
        Metadata: { S: JSON.stringify(metadata) },
        TTL: {
            N: "" + (0, util_1.getExpireDate)(),
        },
    };
    await ddb
        .putItem({
            TableName: meetingTableName,
            Item: item,
        })
        .promise();
    return {
        created: true,
        meetingId: newMeetingInfo.Meeting.MeetingId,
        meetingName: meetingName,
        ownerId: email,
    };
};
exports.createMeeting = createMeeting;
const joinMeeting = async (meetingName, attendeeName) => {
    //// (1) check meeting exists
    let meetingInfo = await (0, exports.getMeetingInfo)(meetingName);
    if (meetingInfo === null) {
        return {
            code: const_1.JoinMeetingExceptionType.NO_MEETING_FOUND,
            exception: true,
        };
    }
    //// (2) check attendeeName
    if (attendeeName === "") {
        return {
            code: const_1.JoinMeetingExceptionType.PARAMETER_ERROR,
            exception: true,
        };
    }
    //// (3) create attendee in Amazon Chime
    console.info("Adding new attendee");
    const attendeeInfo = await chime
        .createAttendee({
            MeetingId: meetingInfo.meetingId,
            ExternalUserId: (0, uuid_1.v4)(),
        })
        .promise();
    //// (4) register attendee in DB
    await ddb
        .putItem({
            TableName: attendeesTableName,
            Item: {
                AttendeeId: {
                    S: `${meetingName}/${attendeeInfo.Attendee.AttendeeId}`,
                },
                AttendeeName: { S: attendeeName },
                TTL: {
                    N: "" + (0, util_1.getExpireDate)(),
                },
            },
        })
        .promise();
    console.log("MEETING_INFO", meetingInfo);
    return {
        meetingName: meetingInfo.meetingName,
        meeting: meetingInfo.meeting,
        attendee: attendeeInfo.Attendee,
    };
};
exports.joinMeeting = joinMeeting;
const getAttendeeInfo = async (meetingName, attendeeId) => {
    //// (1) retrieve attendee info from DB. key is concatinate of meetingName(encoded) and attendeeId
    const result = await ddb
        .getItem({
            TableName: attendeesTableName,
            Key: {
                AttendeeId: {
                    S: `${meetingName}/${attendeeId}`,
                },
            },
        })
        .promise();
    //// (2) If there is no attendee in the meeting, return fail
    if (!result.Item) {
        return {
            code: const_1.GetAttendeeInfoExceptionType.NO_ATTENDEE_FOUND,
            exception: true,
        };
    }
    console.log(result);
    //// (3) return attendee info.
    return {
        attendeeId: result.Item.AttendeeId.S,
        attendeeName: result.Item.AttendeeName.S,
    };
};
exports.getAttendeeInfo = getAttendeeInfo;
const startTranscribe = async (email, meetingName, lang) => {
    //// (1) check meeting exists
    let meetingInfo = await (0, exports.getMeetingInfo)(meetingName);
    if (meetingInfo === null) {
        return {
            code: const_1.StartTranscribeExceptionType.NO_MEETING_FOUND,
            exception: true,
        };
    }
    //// (2) check if owner calls or not.
    var meetingMetadata = meetingInfo.metadata;
    var ownerId = meetingMetadata["OwnerId"];
    console.log("OWNERID", ownerId, "email", email);
    if (ownerId != email) {
        return {
            code: const_1.StartTranscribeExceptionType.NOT_OWNER,
            exception: true,
        };
    }
    //// (3) start transcribe
    console.log(`Langage code :${lang}`);
    const res = await chime
        .startMeetingTranscription({
            MeetingId: meetingInfo.meetingId,
            TranscriptionConfiguration: {
                EngineTranscribeSettings: {
                    LanguageCode: lang,
                    //VocabularyFilterMethod?: TranscribeVocabularyFilterMethod;
                    //VocabularyFilterName?: String;
                    //VocabularyName?: String;
                    //Region?: TranscribeRegion;
                },
            },
        })
        .promise();
    return {};
};
exports.startTranscribe = startTranscribe;
/***
 * stop Transcribe.
 *
 */
const stopTranscribe = async (email, meetingName) => {
    console.log("stopTranscribe");
    //// (1) If there is no meeting, return fail
    let meetingInfo = await (0, exports.getMeetingInfo)(meetingName);
    if (meetingInfo === null) {
        return {
            code: const_1.StopTranscribeExceptionType.NO_MEETING_FOUND,
            exception: true,
        };
    }
    //// (2) check if owner calls or not.
    var meetingMetadata = meetingInfo.metadata;
    var ownerId = meetingMetadata["OwnerId"];
    console.log("OWNERID", ownerId, "email", email);
    if (ownerId != email) {
        return {
            code: const_1.StopTranscribeExceptionType.NOT_OWNER,
            exception: true,
        };
    }
    //// (3) stop transcribe
    const res = await chime
        .stopMeetingTranscription({
            MeetingId: meetingInfo.meetingId,
        })
        .promise();
    console.log("stop transcribe result", res);
    return {};
};
exports.stopTranscribe = stopTranscribe;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVldGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lZXRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW9EO0FBQ3BELCtCQUEwQjtBQUMxQixtQ0FBMlU7QUFDM1UsaUNBQXVDO0FBQ3ZDLElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBbUIsQ0FBQztBQUN2RCxJQUFJLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW9CLENBQUM7QUFDMUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7QUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxlQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNqRCxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksa0JBQVEsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0FBQzlFOzs7Ozs7R0FNRztBQUNJLE1BQU0sY0FBYyxHQUFHLEtBQUssRUFBRSxXQUFtQixFQUErQixFQUFFO0lBQ3JGLHNCQUFzQjtJQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3RILE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLHlDQUF5QztJQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNkLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFFRCx1RUFBdUU7SUFDdkUsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUssQ0FBQztJQUNq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LE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsSUFBSSxPQUFPLElBQUksS0FBSyxFQUFFO1FBQ2xCLE9BQU87WUFDSCxJQUFJLEVBQUUsbUNBQTJCLENBQUMsU0FBUztZQUMzQyxTQUFTLEVBQUUsSUFBSTtTQUNsQixDQUFDO0tBQ0w7SUFFRCx3QkFBd0I7SUFDeEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLO1NBQ2xCLHdCQUF3QixDQUFDO1FBQ3RCLFNBQVMsRUFBRSxXQUFXLENBQUMsU0FBUztLQUNuQyxDQUFDO1NBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBOUJXLFFBQUEsY0FBYyxrQkE4QnpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREIsIENoaW1lLCBFbmRwb2ludCB9IGZyb20gXCJhd3Mtc2RrXCI7XG5pbXBvcnQgeyB2NCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgeyBDcmVhdGVNZWV0aW5nUmVzcG9uc2UsIEdldEF0dGVuZGVlSW5mb0V4Y2VwdGlvbiwgR2V0QXR0ZW5kZWVJbmZvRXhjZXB0aW9uVHlwZSwgR2V0QXR0ZW5kZWVJbmZvUmVzcG9uc2UsIEpvaW5NZWV0aW5nRXhjZXB0aW9uLCBKb2luTWVldGluZ0V4Y2VwdGlvblR5cGUsIEpvaW5NZWV0aW5nUmVzcG9uc2UsIE1lZXRpbmdJbmZvLCBNZXRhZGF0YSwgU3RhcnRUcmFuc2NyaWJlRXhjZXB0aW9uLCBTdGFydFRyYW5zY3JpYmVFeGNlcHRpb25UeXBlLCBTdGFydFRyYW5zY3JpYmVSZXNwb25zZSwgU3RvcFRyYW5zY3JpYmVFeGNlcHRpb25UeXBlIH0gZnJvbSBcIi4vY29uc3RcIjtcbmltcG9ydCB7IGdldEV4cGlyZURhdGUgfSBmcm9tIFwiLi91dGlsXCI7XG52YXIgbWVldGluZ1RhYmxlTmFtZSA9IHByb2Nlc3MuZW52Lk1FRVRJTkdfVEFCTEVfTkFNRSE7XG52YXIgYXR0ZW5kZWVzVGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuQVRURU5ERUVfVEFCTEVfTkFNRSE7XG52YXIgZGRiID0gbmV3IER5bmFtb0RCKCk7XG5jb25zdCBjaGltZSA9IG5ldyBDaGltZSh7IHJlZ2lvbjogXCJ1cy1lYXN0LTFcIiB9KTtcbmNoaW1lLmVuZHBvaW50ID0gbmV3IEVuZHBvaW50KFwiaHR0cHM6Ly9zZXJ2aWNlLmNoaW1lLmF3cy5hbWF6b24uY29tL2NvbnNvbGVcIik7XG4vKipcbiAqIGdldCBtZWV0aW5nIGluZm9cbiAqICgxKSByZXRyaWV2ZSBtZWV0aW5nIGluZm8gZnJvbSBEQlxuICogKDIpIElmIHRoZXJlIGlzIG5vIG1lZXRpbmcgaW4gREIsIHJldHVybiBudWxsXG4gKiAoMykgSWYgdGhlcmUgaXMgbm8gbWVldGluZyBpbiBBbWF6b24gQ2hpbWUsIGRlbGV0ZSBmcm9tIERCIGFuZCByZXR1cm4gbnVsbC5cbiAqIEBwYXJhbSB7Kn0gbWVldGluZ05hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE1lZXRpbmdJbmZvID0gYXN5bmMgKG1lZXRpbmdOYW1lOiBzdHJpbmcpOiBQcm9taXNlPE1lZXRpbmdJbmZvIHwgbnVsbD4gPT4ge1xuICAgIC8vLy8gKDEpIHJldHJpZXZlIGluZm9cbiAgICBjb25zb2xlLmxvZyhcImR5bmFtbzFcIiwgbWVldGluZ05hbWUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRkYi5nZXRJdGVtKHsgVGFibGVOYW1lOiBtZWV0aW5nVGFibGVOYW1lLCBLZXk6IHsgTWVldGluZ05hbWU6IHsgUzogbWVldGluZ05hbWUgfSB9IH0pLnByb21pc2UoKTtcbiAgICBjb25zb2xlLmxvZyhcImR5bmFtbzJcIiwgcmVzdWx0KTtcblxuICAgIC8vLy8gKDIpIElmIG5vIG1lZXRpbmcgaW4gREIsIHJldHVybiBudWxsXG4gICAgaWYgKCFyZXN1bHQuSXRlbSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLy8vICgzKSBJZiBubyBtZWV0aW5nIGluIENoaW1lLCBkZWxldGUgbWVldGluZyBmcm9tIERCIGFuZCByZXR1cm4gbnVsbFxuICAgIGNvbnN0IG1lZXRpbmdJbmZvID0gcmVzdWx0Lkl0ZW0hO1xuICAgIGNvbnNvbGUubG9nKFwiUkVBRCBQUk9QUjFcIik7XG4gICAgY29uc3QgbWVldGluZ0RhdGEgPSBKU09OLnBhcnNlKG1lZXRpbmdJbmZvLk1lZXRpbmcuUyEpO1xuICAgIGNvbnNvbGUubG9nKFwiUkVBRCBQUk9QUjJcIik7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ2hlY2sgRXhpc3Q/XG4gICAgICAgIGNvbnN0IG1pZCA9IGF3YWl0IGNoaW1lLmdldE1lZXRpbmcoeyBNZWV0aW5nSWQ6IG1lZXRpbmdEYXRhLk1lZXRpbmdJZCB9KS5wcm9taXNlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2hpbWUgbWVldGluZyBpbmZvOlwiLCBtaWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNoaW1lIG1lZXRpbmcgZXhjZXB0aW9uOlwiLCBlcnIpO1xuICAgICAgICBhd2FpdCBkZWxldGVNZWV0aW5nKG1lZXRpbmdOYW1lKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiUkVBRCBQUk9QUjNcIik7XG5cbiAgICAvLy8vICg0KSByZXR1cm4gbWVldGluZyBpbmZvXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVldGluZ05hbWU6IG1lZXRpbmdJbmZvLk1lZXRpbmdOYW1lLlMhLFxuICAgICAgICBtZWV0aW5nSWQ6IG1lZXRpbmdJbmZvLk1lZXRpbmdJZC5TISxcbiAgICAgICAgbWVldGluZzogSlNPTi5wYXJzZShtZWV0aW5nSW5mby5NZWV0aW5nLlMhKSxcbiAgICAgICAgbWV0YWRhdGE6IEpTT04ucGFyc2UobWVldGluZ0luZm8uTWV0YWRhdGEuUyEpLFxuICAgICAgICBobW1UYXNrQXJuOiBtZWV0aW5nSW5mby5IbW1UYXNrQXJuID8gbWVldGluZ0luZm8uSG1tVGFza0Fybi5TISA6IFwiLVwiLFxuICAgIH07XG59O1xuXG4vKipcbiAqIERlbGV0ZSBtZWV0aW5nIGZyb20gREJcbiAqIEBwYXJhbSB7Kn0gbWVldGluZ05hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRlbGV0ZU1lZXRpbmcgPSBhc3luYyAobWVldGluZ05hbWU6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IGRkYlxuICAgICAgICAuZGVsZXRlSXRlbSh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IG1lZXRpbmdUYWJsZU5hbWUsXG4gICAgICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgICAgICBNZWV0aW5nTmFtZTogeyBTOiBtZWV0aW5nTmFtZSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgLnByb21pc2UoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVNZWV0aW5nID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIG1lZXRpbmdOYW1lOiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nKTogUHJvbWlzZTxDcmVhdGVNZWV0aW5nUmVzcG9uc2U+ID0+IHtcbiAgICAvLy8vICgxKSBjaGVjayBtZWV0aW5nIG5hbWUgZXhpc3RcbiAgICBjb25zdCBtZWV0aW5nSW5mbyA9IGF3YWl0IGdldE1lZXRpbmdJbmZvKG1lZXRpbmdOYW1lKTtcbiAgICBpZiAobWVldGluZ0luZm8gIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNyZWF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbWVldGluZ0lkOiBtZWV0aW5nSW5mby5tZWV0aW5nSWQsXG4gICAgICAgICAgICBtZWV0aW5nTmFtZTogbWVldGluZ0luZm8ubWVldGluZ05hbWUsXG4gICAgICAgICAgICBvd25lcklkOiBtZWV0aW5nSW5mby5tZXRhZGF0YS5Pd25lcklkLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vLy8gKDIpIGNyZWF0ZSBtZWV0aW5nIGluIEFtYXpvbiBDaGltZVxuICAgIGNvbnN0IHJlcXVlc3Q6IENoaW1lLkNyZWF0ZU1lZXRpbmdSZXF1ZXN0ID0ge1xuICAgICAgICBDbGllbnRSZXF1ZXN0VG9rZW46IHY0KCksXG4gICAgICAgIE1lZGlhUmVnaW9uOiByZWdpb24sXG4gICAgfTtcbiAgICBjb25zdCBuZXdNZWV0aW5nSW5mbyA9IGF3YWl0IGNoaW1lLmNyZWF0ZU1lZXRpbmcocmVxdWVzdCkucHJvbWlzZSgpO1xuXG4gICAgLy8vLyAoMykgcmVnaXN0ZXIgbWVldGluZyBpbmZvIGluIERCXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3Qgbm93ID0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICAgICAgICBPd25lcklkOiBlbWFpbCxcbiAgICAgICAgUmVnaW9uOiByZWdpb24sXG4gICAgICAgIFN0YXJ0VGltZTogbm93LFxuICAgIH07XG4gICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgTWVldGluZ05hbWU6IHsgUzogbWVldGluZ05hbWUgfSxcbiAgICAgICAgTWVldGluZ0lkOiB7IFM6IG5ld01lZXRpbmdJbmZvLk1lZXRpbmchLk1lZXRpbmdJZCB9LFxuICAgICAgICBNZWV0aW5nOiB7IFM6IEpTT04uc3RyaW5naWZ5KG5ld01lZXRpbmdJbmZvLk1lZXRpbmcpIH0sXG4gICAgICAgIE1ldGFkYXRhOiB7IFM6IEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKSB9LFxuICAgICAgICBUVEw6IHtcbiAgICAgICAgICAgIE46IFwiXCIgKyBnZXRFeHBpcmVEYXRlKCksXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBhd2FpdCBkZGJcbiAgICAgICAgLnB1dEl0ZW0oe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBtZWV0aW5nVGFibGVOYW1lLFxuICAgICAgICAgICAgSXRlbTogaXRlbSxcbiAgICAgICAgfSlcbiAgICAgICAgLnByb21pc2UoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWF0ZWQ6IHRydWUsXG4gICAgICAgIG1lZXRpbmdJZDogbmV3TWVldGluZ0luZm8uTWVldGluZyEuTWVldGluZ0lkISxcbiAgICAgICAgbWVldGluZ05hbWU6IG1lZXRpbmdOYW1lLFxuICAgICAgICBvd25lcklkOiBlbWFpbCxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGpvaW5NZWV0aW5nID0gYXN5bmMgKG1lZXRpbmdOYW1lOiBzdHJpbmcsIGF0dGVuZGVlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxKb2luTWVldGluZ1Jlc3BvbnNlIHwgSm9pbk1lZXRpbmdFeGNlcHRpb24+ID0+IHtcbiAgICAvLy8vICgxKSBjaGVjayBtZWV0aW5nIGV4aXN0c1xuICAgIGxldCBtZWV0aW5nSW5mbyA9IGF3YWl0IGdldE1lZXRpbmdJbmZvKG1lZXRpbmdOYW1lKTtcbiAgICBpZiAobWVldGluZ0luZm8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGU6IEpvaW5NZWV0aW5nRXhjZXB0aW9uVHlwZS5OT19NRUVUSU5HX0ZPVU5ELFxuICAgICAgICAgICAgZXhjZXB0aW9uOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vLy8gKDIpIGNoZWNrIGF0dGVuZGVlTmFtZVxuICAgIGlmIChhdHRlbmRlZU5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGU6IEpvaW5NZWV0aW5nRXhjZXB0aW9uVHlwZS5QQVJBTUVURVJfRVJST1IsXG4gICAgICAgICAgICBleGNlcHRpb246IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8vLyAoMykgY3JlYXRlIGF0dGVuZGVlIGluIEFtYXpvbiBDaGltZVxuICAgIGNvbnNvbGUuaW5mbyhcIkFkZGluZyBuZXcgYXR0ZW5kZWVcIik7XG4gICAgY29uc3QgYXR0ZW5kZWVJbmZvID0gYXdhaXQgY2hpbWVcbiAgICAgICAgLmNyZWF0ZUF0dGVuZGVlKHtcbiAgICAgICAgICAgIE1lZXRpbmdJZDogbWVldGluZ0luZm8ubWVldGluZ0lkLFxuICAgICAgICAgICAgRXh0ZXJuYWxVc2VySWQ6IHY0KCksXG4gICAgICAgIH0pXG4gICAgICAgIC5wcm9taXNlKCk7XG5cbiAgICAvLy8vICg0KSByZWdpc3RlciBhdHRlbmRlZSBpbiBEQlxuICAgIGF3YWl0IGRkYlxuICAgICAgICAucHV0SXRlbSh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IGF0dGVuZGVlc1RhYmxlTmFtZSxcbiAgICAgICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgICAgICBBdHRlbmRlZUlkOiB7XG4gICAgICAgICAgICAgICAgICAgIFM6IGAke21lZXRpbmdOYW1lfS8ke2F0dGVuZGVlSW5mby5BdHRlbmRlZSEuQXR0ZW5kZWVJZH1gLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgQXR0ZW5kZWVOYW1lOiB7IFM6IGF0dGVuZGVlTmFtZSB9LFxuICAgICAgICAgICAgICAgIFRUTDoge1xuICAgICAgICAgICAgICAgICAgICBOOiBcIlwiICsgZ2V0RXhwaXJlRGF0ZSgpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICAucHJvbWlzZSgpO1xuXG4gICAgY29uc29sZS5sb2coXCJNRUVUSU5HX0lORk9cIiwgbWVldGluZ0luZm8pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVldGluZ05hbWU6IG1lZXRpbmdJbmZvLm1lZXRpbmdOYW1lLFxuICAgICAgICBtZWV0aW5nOiBtZWV0aW5nSW5mby5tZWV0aW5nLFxuICAgICAgICBhdHRlbmRlZTogYXR0ZW5kZWVJbmZvLkF0dGVuZGVlISxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEF0dGVuZGVlSW5mbyA9IGFzeW5jIChtZWV0aW5nTmFtZTogc3RyaW5nLCBhdHRlbmRlZUlkOiBzdHJpbmcpOiBQcm9taXNlPEdldEF0dGVuZGVlSW5mb1Jlc3BvbnNlIHwgR2V0QXR0ZW5kZWVJbmZvRXhjZXB0aW9uPiA9PiB7XG4gICAgLy8vLyAoMSkgcmV0cmlldmUgYXR0ZW5kZWUgaW5mbyBmcm9tIERCLiBrZXkgaXMgY29uY2F0aW5hdGUgb2YgbWVldGluZ05hbWUoZW5jb2RlZCkgYW5kIGF0dGVuZGVlSWRcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkZGJcbiAgICAgICAgLmdldEl0ZW0oe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBhdHRlbmRlZXNUYWJsZU5hbWUsXG4gICAgICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgICAgICBBdHRlbmRlZUlkOiB7XG4gICAgICAgICAgICAgICAgICAgIFM6IGAke21lZXRpbmdOYW1lfS8ke2F0dGVuZGVlSWR9YCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgLnByb21pc2UoKTtcblxuICAgIC8vLy8gKDIpIElmIHRoZXJlIGlzIG5vIGF0dGVuZGVlIGluIHRoZSBtZWV0aW5nLCByZXR1cm4gZmFpbFxuICAgIGlmICghcmVzdWx0Lkl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGU6IEdldEF0dGVuZGVlSW5mb0V4Y2VwdGlvblR5cGUuTk9fQVRURU5ERUVfRk9VTkQsXG4gICAgICAgICAgICBleGNlcHRpb246IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG5cbiAgICAvLy8vICgzKSByZXR1cm4gYXR0ZW5kZWUgaW5mby5cbiAgICByZXR1cm4ge1xuICAgICAgICBhdHRlbmRlZUlkOiByZXN1bHQuSXRlbS5BdHRlbmRlZUlkLlMhLFxuICAgICAgICBhdHRlbmRlZU5hbWU6IHJlc3VsdC5JdGVtLkF0dGVuZGVlTmFtZS5TISxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHN0YXJ0VHJhbnNjcmliZSA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBtZWV0aW5nTmFtZTogc3RyaW5nLCBsYW5nOiBzdHJpbmcpOiBQcm9taXNlPFN0YXJ0VHJhbnNjcmliZVJlc3BvbnNlIHwgU3RhcnRUcmFuc2NyaWJlRXhjZXB0aW9uPiA9PiB7XG4gICAgLy8vLyAoMSkgY2hlY2sgbWVldGluZyBleGlzdHNcbiAgICBsZXQgbWVldGluZ0luZm8gPSBhd2FpdCBnZXRNZWV0aW5nSW5mbyhtZWV0aW5nTmFtZSk7XG4gICAgaWYgKG1lZXRpbmdJbmZvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlOiBTdGFydFRyYW5zY3JpYmVFeGNlcHRpb25UeXBlLk5PX01FRVRJTkdfRk9VTkQsXG4gICAgICAgICAgICBleGNlcHRpb246IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vLy8gKDIpIGNoZWNrIGlmIG93bmVyIGNhbGxzIG9yIG5vdC5cbiAgICB2YXIgbWVldGluZ01ldGFkYXRhID0gbWVldGluZ0luZm8ubWV0YWRhdGE7XG4gICAgdmFyIG93bmVySWQgPSBtZWV0aW5nTWV0YWRhdGFbXCJPd25lcklkXCJdO1xuICAgIGNvbnNvbGUubG9nKFwiT1dORVJJRFwiLCBvd25lcklkLCBcImVtYWlsXCIsIGVtYWlsKTtcbiAgICBpZiAob3duZXJJZCAhPSBlbWFpbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZTogU3RhcnRUcmFuc2NyaWJlRXhjZXB0aW9uVHlwZS5OT1RfT1dORVIsXG4gICAgICAgICAgICBleGNlcHRpb246IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8vLyAoMykgc3RhcnQgdHJhbnNjcmliZVxuICAgIGNvbnNvbGUubG9nKGBMYW5nYWdlIGNvZGUgOiR7bGFuZ31gKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjaGltZVxuICAgICAgICAuc3RhcnRNZWV0aW5nVHJhbnNjcmlwdGlvbih7XG4gICAgICAgICAgICBNZWV0aW5nSWQ6IG1lZXRpbmdJbmZvLm1lZXRpbmdJZCxcbiAgICAgICAgICAgIFRyYW5zY3JpcHRpb25Db25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgRW5naW5lVHJhbnNjcmliZVNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIExhbmd1YWdlQ29kZTogbGFuZyxcbiAgICAgICAgICAgICAgICAgICAgLy9Wb2NhYnVsYXJ5RmlsdGVyTWV0aG9kPzogVHJhbnNjcmliZVZvY2FidWxhcnlGaWx0ZXJNZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgIC8vVm9jYWJ1bGFyeUZpbHRlck5hbWU/OiBTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIC8vVm9jYWJ1bGFyeU5hbWU/OiBTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIC8vUmVnaW9uPzogVHJhbnNjcmliZVJlZ2lvbjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgLnByb21pc2UoKTtcblxuICAgIHJldHVybiB7fTtcbn07XG5cbi8qKipcbiAqIHN0b3AgVHJhbnNjcmliZS5cbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9wVHJhbnNjcmliZSA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBtZWV0aW5nTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJzdG9wVHJhbnNjcmliZVwiKTtcbiAgICAvLy8vICgxKSBJZiB0aGVyZSBpcyBubyBtZWV0aW5nLCByZXR1cm4gZmFpbFxuICAgIGxldCBtZWV0aW5nSW5mbyA9IGF3YWl0IGdldE1lZXRpbmdJbmZvKG1lZXRpbmdOYW1lKTtcbiAgICBpZiAobWVldGluZ0luZm8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGU6IFN0b3BUcmFuc2NyaWJlRXhjZXB0aW9uVHlwZS5OT19NRUVUSU5HX0ZPVU5ELFxuICAgICAgICAgICAgZXhjZXB0aW9uOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vLy8gKDIpIGNoZWNrIGlmIG93bmVyIGNhbGxzIG9yIG5vdC5cbiAgICB2YXIgbWVldGluZ01ldGFkYXRhID0gbWVldGluZ0luZm8ubWV0YWRhdGE7XG4gICAgdmFyIG93bmVySWQgPSBtZWV0aW5nTWV0YWRhdGFbXCJPd25lcklkXCJdO1xuICAgIGNvbnNvbGUubG9nKFwiT1dORVJJRFwiLCBvd25lcklkLCBcImVtYWlsXCIsIGVtYWlsKTtcbiAgICBpZiAob3duZXJJZCAhPSBlbWFpbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZTogU3RvcFRyYW5zY3JpYmVFeGNlcHRpb25UeXBlLk5PVF9PV05FUixcbiAgICAgICAgICAgIGV4Y2VwdGlvbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLy8vICgzKSBzdG9wIHRyYW5zY3JpYmVcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjaGltZVxuICAgICAgICAuc3RvcE1lZXRpbmdUcmFuc2NyaXB0aW9uKHtcbiAgICAgICAgICAgIE1lZXRpbmdJZDogbWVldGluZ0luZm8ubWVldGluZ0lkLFxuICAgICAgICB9KVxuICAgICAgICAucHJvbWlzZSgpO1xuICAgIGNvbnNvbGUubG9nKFwic3RvcCB0cmFuc2NyaWJlIHJlc3VsdFwiLCByZXMpO1xuICAgIHJldHVybiB7fTtcbn07XG4iXX0=
