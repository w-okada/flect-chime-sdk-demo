"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEmailFromAccessToken = exports.generateResponse = exports.getExpireDate = exports.getResponseTemplate = void 0;
const aws_sdk_1 = require("aws-sdk");
const provider = new aws_sdk_1.CognitoIdentityServiceProvider();
const getResponseTemplate = () => {
    var response = {
        statusCode: 200,
        headers: {
            "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Origin": "*",
        },
        body: "{}",
        isBase64Encoded: false,
    };
    return response;
};
exports.getResponseTemplate = getResponseTemplate;
const getExpireDate = () => {
    return Math.floor(Date.now() / 1000) + 60 * 60 * 24;
};
exports.getExpireDate = getExpireDate;
const generateResponse = (body) => {
    var response = {
        statusCode: 200,
        headers: {
            "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Origin": "*",
        },
        body: JSON.stringify(body),
        isBase64Encoded: false,
    };
    return response;
};
exports.generateResponse = generateResponse;
const getEmailFromAccessToken = async (accessToken) => {
    const p = new Promise((resolve, reject) => {
        provider.getUser({ AccessToken: accessToken }, (err, data) => {
            console.log(err);
            if (err) {
                console.log("invalid accessToken");
                reject("invalid accessToken");
            }
            console.log(data);
            resolve(data);
        });
    });
    const userData = await p;
    let email;
    let foundEmail = false;
    for (let i = 0; i < userData.UserAttributes.length; i++) {
        const att = userData.UserAttributes[i];
        if (att["Name"] == "email") {
            email = att["Value"];
            foundEmail = true;
        }
    }
    if (foundEmail) {
        return email;
    }
    else {
        console.log("email not found");
        throw "email not found";
    }
};
exports.getEmailFromAccessToken = getEmailFromAccessToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXlEO0FBR3pELE1BQU0sUUFBUSxHQUFHLElBQUksd0NBQThCLEVBQUUsQ0FBQztBQUUvQyxNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRTtJQUNwQyxJQUFJLFFBQVEsR0FBRztRQUNYLFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFO1lBQ0wsOEJBQThCLEVBQUUsc0VBQXNFO1lBQ3RHLDhCQUE4QixFQUFFLEdBQUc7WUFDbkMsNkJBQTZCLEVBQUUsR0FBRztTQUNyQztRQUNELElBQUksRUFBRSxJQUFJO1FBQ1YsZUFBZSxFQUFFLEtBQUs7S0FDekIsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQVpXLFFBQUEsbUJBQW1CLHVCQVk5QjtBQUVLLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtJQUM5QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQUZXLFFBQUEsYUFBYSxpQkFFeEI7QUFFSyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBc0IsRUFBRSxFQUFFO0lBQ3ZELElBQUksUUFBUSxHQUFHO1FBQ1gsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUU7WUFDTCw4QkFBOEIsRUFBRSxzRUFBc0U7WUFDdEcsOEJBQThCLEVBQUUsR0FBRztZQUNuQyw2QkFBNkIsRUFBRSxHQUFHO1NBQ3JDO1FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzFCLGVBQWUsRUFBRSxLQUFLO0tBQ3pCLENBQUM7SUFDRixPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFaVyxRQUFBLGdCQUFnQixvQkFZM0I7QUFFSyxNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFBRSxXQUFtQixFQUFFLEVBQUU7SUFDakUsTUFBTSxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQWlELENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3RGLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixJQUFJLEdBQUcsRUFBRTtnQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCLElBQUksS0FBSyxDQUFDO0lBQ1YsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtZQUN4QixLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDckI7S0FDSjtJQUVELElBQUksVUFBVSxFQUFFO1FBQ1osT0FBTyxLQUFLLENBQUM7S0FDaEI7U0FBTTtRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQixNQUFNLGlCQUFpQixDQUFDO0tBQzNCO0FBQ0wsQ0FBQyxDQUFDO0FBN0JXLFFBQUEsdUJBQXVCLDJCQTZCbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IHsgSFRUUFJlc3BvbnNlQm9keSB9IGZyb20gXCIuL2h0dHBfcmVxdWVzdFwiO1xuXG5jb25zdCBwcm92aWRlciA9IG5ldyBDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIoKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlc3BvbnNlVGVtcGxhdGUgPSAoKSA9PiB7XG4gICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiOiBcIkNvbnRlbnQtVHlwZSxYLUFtei1EYXRlLEF1dGhvcml6YXRpb24sWC1BcGktS2V5LFgtQW16LVNlY3VyaXR5LVRva2VuXCIsXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogXCIqXCIsXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIixcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogXCJ7fVwiLFxuICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEV4cGlyZURhdGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgNjAgKiA2MCAqIDI0O1xufTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlUmVzcG9uc2UgPSAoYm9keTogSFRUUFJlc3BvbnNlQm9keSkgPT4ge1xuICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIjogXCJDb250ZW50LVR5cGUsWC1BbXotRGF0ZSxBdXRob3JpemF0aW9uLFgtQXBpLUtleSxYLUFtei1TZWN1cml0eS1Ub2tlblwiLFxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCI6IFwiKlwiLFxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEVtYWlsRnJvbUFjY2Vzc1Rva2VuID0gYXN5bmMgKGFjY2Vzc1Rva2VuOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBwID0gbmV3IFByb21pc2U8Q29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyLkdldFVzZXJSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBwcm92aWRlci5nZXRVc2VyKHsgQWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuIH0sIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIGFjY2Vzc1Rva2VuXCIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChcImludmFsaWQgYWNjZXNzVG9rZW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgcDtcbiAgICBsZXQgZW1haWw7XG4gICAgbGV0IGZvdW5kRW1haWwgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVzZXJEYXRhLlVzZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF0dCA9IHVzZXJEYXRhLlVzZXJBdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAoYXR0W1wiTmFtZVwiXSA9PSBcImVtYWlsXCIpIHtcbiAgICAgICAgICAgIGVtYWlsID0gYXR0W1wiVmFsdWVcIl07XG4gICAgICAgICAgICBmb3VuZEVtYWlsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3VuZEVtYWlsKSB7XG4gICAgICAgIHJldHVybiBlbWFpbDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcImVtYWlsIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgdGhyb3cgXCJlbWFpbCBub3QgZm91bmRcIjtcbiAgICB9XG59O1xuIl19